<application>
  <component name="AppStorage">
    <histories>
      <item value="/** * Constructs a new set containing the elements in the specified * collection. The &lt;tt&gt;HashMap&lt;/tt&gt; is created with default load factor * (0.75) and an initial capacity sufficient to contain the elements in * the specified collection. * * @param c the collection whose elements are to be placed into this set * @throws NullPointerException if the specified collection is null */" />
      <item value="/** * Returns a string representation of this {@code BigDecimal} * without an exponent field. For values with a positive scale, * the number of digits to the right of the decimal point is used * to indicate scale. For values with a zero or negative scale, * the resulting string is generated as if the value were * converted to a numerically equal value with zero scale and as * if all the trailing zeros of the zero scale value were present * in the result. * * The entire string is prefixed by a minus sign character '-' * (&lt;tt&gt;'&amp;#92;u002D'&lt;/tt&gt;) if the unscaled value is less than * zero. No sign character is prefixed if the unscaled value is * zero or positive. * * Note that if the result of this method is passed to the * {@linkplain #BigDecimal(String) string constructor}, only the * numerical value of this {@code BigDecimal} will necessarily be * recovered; the representation of the new {@code BigDecimal} * may have a different scale. In particular, if this * {@code BigDecimal} has a negative scale, the string resulting * from this method will have a scale of zero when processed by * the string constructor. * * (This method behaves analogously to the {@code toString} * method in 1.4 and earlier releases.) * * @return a string representation of this {@code BigDecimal} * without an exponent field. * @since 1.5 * @see #toString() * @see #toEngineeringString() */" />
      <item value="/** * Sorts the specified range of the specified array of objects into * ascending order, according to the * {@linkplain Comparable natural ordering} of its * elements. The range to be sorted extends from index * {@code fromIndex}, inclusive, to index {@code toIndex}, exclusive. * (If {@code fromIndex==toIndex}, the range to be sorted is empty.) All * elements in this range must implement the {@link Comparable} * interface. Furthermore, all elements in this range must be &lt;i&gt;mutually * comparable&lt;/i&gt; (that is, {@code e1.compareTo(e2)} must not throw a * {@code ClassCastException} for any elements {@code e1} and * {@code e2} in the array). * * &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;: equal elements will * not be reordered as a result of the sort. * * &lt;p&gt;Implementation note: This implementation is a stable, adaptive, * iterative mergesort that requires far fewer than n lg(n) comparisons * when the input array is partially sorted, while offering the * performance of a traditional mergesort when the input array is * randomly ordered. If the input array is nearly sorted, the * implementation requires approximately n comparisons. Temporary * storage requirements vary from a small constant for nearly sorted * input arrays to n/2 object references for randomly ordered input * arrays. * * &lt;p&gt;The implementation takes equal advantage of ascending and * descending order in its input array, and can take advantage of * ascending and descending order in different parts of the the same * input array. It is well-suited to merging two or more sorted arrays: * simply concatenate the arrays and sort the resulting array. * * &lt;p&gt;The implementation was adapted from Tim Peters's list sort for Python * (&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt; * TimSort&lt;/a&gt;). It uses techniques from Peter McIlroy's &quot;Optimistic * Sorting and Information Theoretic Complexity&quot;, in Proceedings of the * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, * January 1993. * * @param a the array to be sorted * @param fromIndex the index of the first element (inclusive) to be * sorted * @param toIndex the index of the last element (exclusive) to be sorted * @throws IllegalArgumentException if {@code fromIndex &gt; toIndex} or * (optional) if the natural ordering of the array elements is * found to violate the {@link Comparable} contract * @throws ArrayIndexOutOfBoundsException if {@code fromIndex &lt; 0} or * {@code toIndex &gt; a.length} * @throws ClassCastException if the array contains elements that are * not &lt;i&gt;mutually comparable&lt;/i&gt; (for example, strings and * integers). */" />
      <item value="/** * Sorts the specified range of the specified array of objects according * to the order induced by the specified comparator. The range to be * sorted extends from index {@code fromIndex}, inclusive, to index * {@code toIndex}, exclusive. (If {@code fromIndex==toIndex}, the * range to be sorted is empty.) All elements in the range must be * &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator (that is, * {@code c.compare(e1, e2)} must not throw a {@code ClassCastException} * for any elements {@code e1} and {@code e2} in the range). * * &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;: equal elements will * not be reordered as a result of the sort. * * &lt;p&gt;Implementation note: This implementation is a stable, adaptive, * iterative mergesort that requires far fewer than n lg(n) comparisons * when the input array is partially sorted, while offering the * performance of a traditional mergesort when the input array is * randomly ordered. If the input array is nearly sorted, the * implementation requires approximately n comparisons. Temporary * storage requirements vary from a small constant for nearly sorted * input arrays to n/2 object references for randomly ordered input * arrays. * * &lt;p&gt;The implementation takes equal advantage of ascending and * descending order in its input array, and can take advantage of * ascending and descending order in different parts of the the same * input array. It is well-suited to merging two or more sorted arrays: * simply concatenate the arrays and sort the resulting array. * * &lt;p&gt;The implementation was adapted from Tim Peters's list sort for Python * (&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt; * TimSort&lt;/a&gt;). It uses techniques from Peter McIlroy's &quot;Optimistic * Sorting and Information Theoretic Complexity&quot;, in Proceedings of the * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, * January 1993. * * @param &lt;T&gt; the class of the objects to be sorted * @param a the array to be sorted * @param fromIndex the index of the first element (inclusive) to be * sorted * @param toIndex the index of the last element (exclusive) to be sorted * @param c the comparator to determine the order of the array. A * {@code null} value indicates that the elements' * {@linkplain Comparable natural ordering} should be used. * @throws ClassCastException if the array contains elements that are not * &lt;i&gt;mutually comparable&lt;/i&gt; using the specified comparator. * @throws IllegalArgumentException if {@code fromIndex &gt; toIndex} or * (optional) if the comparator is found to violate the * {@link Comparator} contract * @throws ArrayIndexOutOfBoundsException if {@code fromIndex &lt; 0} or * {@code toIndex &gt; a.length} */" />
      <item value="===2019-07-07 17:09:58.451 DEBUG com.ctrip.framework.apollo.internals.RemoteConfigLongPollService Line:163 - Long polling from http://10.0.99.230:8080/notifications/v2?cluster=default&amp;appId=ems-base-data&amp;ip=192.168.32.1&amp;notifications=%5B%7B%22namespaceName%22%3A%22ems.xxjob%22%2C%22notificationId%22%3A374%7D%2C%7B%22namespaceName%22%3A%22ems.logging%22%2C%22notificationId%22%3A200%7D%2C%7B%22namespaceName%22%3A%22ems.springDataSource%22%2C%22notificationId%22%3A337%7D%2C%7B%22namespaceName%22%3A%22ems.s3%22%2C%22notificationId%22%3A11%7D%2C%7B%22namespaceName%22%3A%22ems.tssWebservice%22%2C%22notificationId%22%3A301%7D%2C%7B%22namespaceName%22%3A%22ems.core%22%2C%22notificationId%22%3A410%7D%2C%7B%22namespaceName%22%3A%22application%22%2C%22notificationId%22%3A19%7D%2C%7B%22namespaceName%22%3A%22ems.springRabbitMq%22%2C%22notificationId%22%3A418%7D%2C%7B%22namespaceName%22%3A%22ems.springRedis%22%2C%22notificationId%22%3A312%7D%2C%7B%22namespaceName%22%3A%22ems.feign%22%2C%22notificationId%22%3A415%7D%2C%7B%22namespaceName%22%3A%22ems.mybatis%22%2C%22notificationId%22%3A170%7D%2C%7B%22namespaceName%22%3A%22ems.springConfig%22%2C%22notificationId%22%3A387%7D%5D" />
      <item value="/** * The Java SQL framework allows for multiple database drivers. Each driver should supply a class that implements the Driver interface * * &lt;p&gt; * The DriverManager will try to load as many drivers as it can find and then for any given connection request, it will ask each driver in turn to try to * connect to the target URL. * &lt;/p&gt; * * &lt;p&gt; * It is strongly recommended that each Driver class should be small and standalone so that the Driver class can be loaded and queried without bringing in vast * quantities of supporting code. * &lt;/p&gt; * * &lt;p&gt; * When a Driver class is loaded, it should create an instance of itself and register it with the DriverManager. This means that a user can load and register a * driver by doing Class.forName(&quot;foo.bah.Driver&quot;) * &lt;/p&gt; */" />
      <item value="/* * Standardizes OS name information to align with other drivers/clients * for MySQL connection attributes * * @return the transformed, standardized OS name */" />
      <item value="// Tie the thread's context ClassLoader to the ClassLoader that loaded the class instead of inheriting the context ClassLoader from the current // thread, which would happen by default. // Application servers may use this information if they attempt to shutdown this thread. By leaving the default context ClassLoader this thread // could end up being shut down even when it is shared by other applications and, being it statically initialized, thus, never restarted again." />
      <item value="/** * This class implements a thread that is responsible for closing abandoned MySQL connections, i.e., connections that are not explicitly closed. * There is only one instance of this class and there is a single thread to do this task. This thread's executor is statically referenced in this same class. */" />
      <item value="/** * Removes the next reference object in this queue, blocking until either * one becomes available or the given timeout period expires. * * &lt;p&gt; This method does not offer real-time guarantees: It schedules the * timeout as if by invoking the {@link Object#wait(long)} method. * * @param timeout If positive, block for up to &lt;code&gt;timeout&lt;/code&gt; * milliseconds while waiting for a reference to be * added to this queue. If zero, block indefinitely. * * @return A reference object, if one was available within the specified * timeout period, otherwise &lt;code&gt;null&lt;/code&gt; * * @throws IllegalArgumentException * If the value of the timeout argument is negative * * @throws InterruptedException * If the timeout wait is interrupted */" />
      <item value="/** * Checks if the thread's context ClassLoader is active. This is usually true but some application managers implement a life-cycle mechanism in their * ClassLoaders that is linked to the corresponding application's life-cycle. As such, a stopped/ended application will have a ClassLoader unable to load * anything and, eventually, they throw an exception when trying to do so. When this happens, this thread has no point in being alive anymore. */" />
      <item value="Deserializer String Cache" />
      <item value="/** * Get a connection from the pool, or timeout after the specified number of milliseconds. * * @param hardTimeout the maximum time to wait for a connection from the pool * @return a java.sql.Connection instance * @throws SQLException thrown if a timeout occurs trying to obtain a connection */" />
      <item value="/** * Set the SQL query to be executed to test the validity of connections. Using * the JDBC4 &lt;code&gt;Connection.isValid()&lt;/code&gt; method to test connection validity can * be more efficient on some databases and is recommended. See * {@link HikariConfig#setJdbc4ConnectionTest(boolean)}. * * @param connectionTestQuery a SQL query string */" />
      <item value="/** * Set the SQL query to be executed to test the validity of connections. Using * the JDBC4 &lt;code&gt;Connection.isValid()&lt;/code&gt; method to test connection validity can * be more efficient on some databases and is recommended. See * {@link HikariConfig#setJdbc4ConnectionTest(boolean)}." />
      <item value="MINUTES" />
      <item value="SECONDS" />
      <item value="/** * Creates a new {@code ThreadPoolExecutor} with the given initial * parameters and default thread factory and rejected execution handler. * It may be more convenient to use one of the {@link Executors} factory * methods instead of this general purpose constructor. * * @param corePoolSize the number of threads to keep in the pool, even * if they are idle, unless {@code allowCoreThreadTimeOut} is set * @param maximumPoolSize the maximum number of threads to allow in the * pool * @param keepAliveTime when the number of threads is greater than * the core, this is the maximum time that excess idle threads * will wait for new tasks before terminating. * @param unit the time unit for the {@code keepAliveTime} argument * @param workQueue the queue to use for holding tasks before they are * executed. This queue will hold only the {@code Runnable} * tasks submitted by the {@code execute} method. * @throws IllegalArgumentException if one of the following holds:&lt;br&gt; * {@code corePoolSize &lt; 0}&lt;br&gt; * {@code keepAliveTime &lt; 0}&lt;br&gt; * {@code maximumPoolSize &lt;= 0}&lt;br&gt; * {@code maximumPoolSize &lt; corePoolSize} * @throws NullPointerException if {@code workQueue} is null */" />
      <item value="/** * Splits {@code sequence} into string components and returns them as an immutable list. If you * want an {@link Iterable} which may be lazily evaluated, use {@link #split(CharSequence)}. * * @param sequence the sequence of characters to split * @return an immutable list of the segments split from the parameter * @since 15.0 */" />
      <item value="/** * Defines zero (0) or more exception {@link Class classes}, which must be * subclasses of {@link Throwable}, indicating which exception types must cause * a transaction rollback. * &lt;p&gt;By default, a transaction will be rolling back on {@link RuntimeException} * and {@link Error} but not on checked exceptions (business exceptions). See * {@link org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)} * for a detailed explanation. * &lt;p&gt;This is the preferred way to construct a rollback rule (in contrast to * {@link #rollbackForClassName}), matching the exception class and its subclasses. * &lt;p&gt;Similar to {@link org.springframework.transaction.interceptor.RollbackRuleAttribute#RollbackRuleAttribute(Class clazz)}. * @see #rollbackForClassName * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)" />
      <item value=" /**      * Returns the absolute pathname string of this abstract pathname.      *      * &lt;p&gt; If this abstract pathname is already absolute, then the pathname      * string is simply returned as if by the &lt;code&gt;{@link #getPath}&lt;/code&gt;      * method.  If this abstract pathname is the empty abstract pathname then      * the pathname string of the current user directory, which is named by the      * system property &lt;code&gt;user.dir&lt;/code&gt;, is returned.  Otherwise this      * pathname is resolved in a system-dependent way.  On UNIX systems, a      * relative pathname is made absolute by resolving it against the current      * user directory.  On Microsoft Windows systems, a relative pathname is made absolute      * by resolving it against the current directory of the drive named by the      * pathname, if any; if not, it is resolved against the current user      * directory.      *      * @return  The absolute pathname string denoting the same file or      *          directory as this abstract " />
      <item value="Substitute the template entries with the generated sheet data files" />
      <item value="/** * Returns the longest string {@code prefix} such that {@code a.toString().startsWith(prefix) &amp;&amp; * b.toString().startsWith(prefix)}, taking care not to split surrogate pairs. If {@code a} and * {@code b} have no common prefix, returns the empty string. * * @since 11.0 */" />
      <item value="equivalent" />
      <item value="specified twice" />
      <item value="/** * Customize the element declaration to be nillable. * &lt;p&gt;If nillable() is true, then the JavaBean property is * mapped to a XML Schema nillable element declaration. */" />
      <item value="unmodifiable" />
      <item value="bank transfer" />
      <item value="FindBugs: Dead store to local variable This instruction assigns a value to a local variable, but the value is not read or used in any subsequent instruction. Often, this indicates an error, because the value computed is never used. Note that Sun's ja vac compiler often generates dead stores for final local variables. Because FindBugs is a bytecode-based tool, there is no easy way to eliminate these false positives." />
      <item value="he name of the user-provided message bundle as defined in the specification." />
      <item value="make" />
      <item value="Result" />
      <item value="/** * If a value is present, apply the provided {@code Optional}-bearing * mapping function to it, return that result, otherwise return an empty * {@code Optional}. This method is similar to {@link #map(Function)}, * but the provided mapper is one whose result is already an {@code Optional}, * and if invoked, {@code flatMap} does not wrap it with an additional * {@code Optional}. * * @param &lt;U&gt; The type parameter to the {@code Optional} returned by * @param mapper a mapping function to apply to the value, if present * the mapping function * @return the result of applying an {@code Optional}-bearing mapping * function to the value of this {@code Optional}, if a value is present, * otherwise an empty {@code Optional} * @throws NullPointerException if the mapping function is null or returns * a null result */" />
      <item value="random" />
      <item value="ripples" />
      <item value="Result of 'Stream.sorted()' is ignored less... (Ctrl+F1) Inspection info: Reports any calls to specific methods where the result of that call is ignored. Method calls inspected are:&#10;Calls to simple getters (which do nothing except return a field)&#10;Calls to methods specified in the settings of this inspection&#10;Calls to Methods annotated with org.jetbrains.annotations.Contract(pure=true)&#10;Calls to Methods annotated with .*.CheckReturnValue&#10;Calls to Methods located in a class annotated with javax.annotation.CheckReturnValue&#10;Calls to Methods located in a package annotated with javax.annotation.CheckReturnValue&#10;Optionally all calls to non-library methods&#10;For calls to many methods ignoring the result is perfectly legitimate, but for some methods it is almost certainly an error. Examples of methods where ignoring the result of a call is likely to be an error include java.io.inputStream.read(), which returns the number of bytes actually read and any method on java.lang.String or java.math.BigInteger, as all of those methods are side-effect free and thus pointless if ignored." />
      <item value="/** * Names of the default caches to consider for caching operations defined * in the annotated class. * &lt;p&gt;If none is set at the operation level, these are used instead of the default. * &lt;p&gt;May be used to determine the target cache (or caches), matching the * qualifier value or the bean names of a specific bean definition. */" />
      <item value="/** * Names of the caches in which method invocation results are stored. * &lt;p&gt;Names may be used to determine the target cache (or caches), matching * the qualifier value or bean name of a specific bean definition. * @since 4.2 * @see #value * @see CacheConfig#cacheNames */" />
      <item value="Manual acks - user must ack/nack via a channel aware listener." />
      <item value="/** * Set the concurrency of the listener container for this listener. Overrides the * default set by the listener container factory. Maps to the concurrency setting of * the container type. * &lt;p&gt;For a * {@link org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer * SimpleMessageListenerContainer} if this value is a simple integer, it sets a fixed * number of consumers in the {@code concurrentConsumers} property. If it is a string * with the form {@code &quot;m-n&quot;}, the {@code concurrentConsumers} is set to {@code m} * and the {@code maxConcurrentConsumers} is set to {@code n}. * &lt;p&gt;For a * {@link org.springframework.amqp.rabbit.listener.DirectMessageListenerContainer * DirectMessageListenerContainer} it sets the {@code consumersPerQueue} property. * @return the concurrency. * @since 2.0 */" />
      <item value="allow" />
      <item value="Reads the full contents of this byte source as a byte array." />
      <item value="/** * Returns a buffered reader that reads from a file using the given character set. * * &lt;p&gt;&lt;b&gt;{@link java.nio.file.Path} equivalent:&lt;/b&gt; {@link" />
      <item value="/** * Provides utility methods for working with {@linkplain File files}. * * &lt;p&gt;{@link java.nio.file.Path} users will find similar utilities in {@link MoreFiles} and the * JDK's {@link java.nio.file.Files} class. * * @author Chris Nokleberg * @author Colin Decker * @since 1.0 */" />
      <item value="/** * This class consists exclusively of static methods that return a {@link Path} * by converting a path string or {@link URI}. * * @since 1.7 */" />
      <item value="/** * Create a new file, failing if the file already exists. * The check for the existence of the file and the creation of the file * if it does not exist is atomic with respect to other file system * operations. */" />
      <item value="/** * Create a new file if it does not exist. * This option is ignored if the {@link #CREATE_NEW} option is also set. * The check for the existence of the file and the creation of the file * if it does not exist is atomic with respect to other file system * operations. */" />
      <item value="/** * If the file already exists and it is opened for {@link #WRITE} * access, then its length is truncated to 0. This option is ignored * if the file is opened only for {@link #READ} access. */" />
      <item value="/** * If the file is opened for {@link #WRITE} access then bytes will be written * to the end of the file rather than the beginning. * * &lt;p&gt; If the file is opened for write access by other programs, then it * is file system specific if writing to the end of the file is atomic. */" />
      <item value="get Vendor Code" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="68" />
        <entry key="ENGLISH" value="69" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20181219000250238" />
        <option name="appKeyConfigured" value="true" />
      </app-key>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Microsoft YaHei Mono" />
    <option name="primaryFontFamily" value="Microsoft YaHei Mono" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="269a4579c59bf261" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>