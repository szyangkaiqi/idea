<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="1709" />
    <option name="newTranslationDialogX" value="83" />
    <option name="newTranslationDialogY" value="467" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Bottom Border Color" />
      <item value="Right Border Color" />
      <item value="BLACK" />
      <item value="SOLID FOREGROUND" />
      <item value="Returns an unmodifiable view of the difference of two sets. The returned set contains all elements that are contained by set1 and not contained by set2. set2 may also contain elements not present in set1; these are simply ignored. The iteration order of the returned set matches that of set1. Results are undefined if set1 and set2 are sets based on different equivalence relations (as HashSet, TreeSet, and the keySet of an IdentityHashMap all are)." />
      <item value="Returns an unmodifiable view of the union of two sets. The returned set contains all elements that are contained in either backing set. Iterating over the returned set iterates first over all the elements of set1, then over each element of set2, in order, that is not contained in set1. Results are undefined if set1 and set2 are sets based on different equivalence relations (as HashSet, TreeSet, and the Map.keySet of an IdentityHashMap all are)." />
      <item value="Returns an unmodifiable view of the intersection of two sets. The returned set contains all elements that are contained by both backing sets. The iteration order of the returned set matches that of set1. Results are undefined if set1 and set2 are sets based on different equivalence relations (as HashSet, TreeSet, and the keySet of an IdentityHashMap all are). Note: The returned view performs slightly better when set1 is the smaller of the two sets. If you have reason to believe one of your sets will generally be smaller than the other, pass it first. Unfortunately, since this method sets the generic type of the returned set based on the type of the first set passed, this could in rare cases force you to make a cast, for example: Set&lt;Object&gt; aFewBadObjects = ... Set&lt;String&gt; manyBadStrings = ... impossible for a non-String to be in the intersection SuppressWarnings(&quot;unchecked&quot;) Set&lt;String&gt; badStrings = (Set) Sets.intersection( aFewBadObjects, manyBadStrings); This is unfortunate, but should come up only very rarely." />
      <item value="intersection" />
      <item value="Returns an immutable set instance containing the given enum elements. Internally, the returned set will be backed by an EnumSet. The iteration order of the returned set follows the enum's iteration order, not the order in which the elements are provided to the method. Params: anElement – one of the elements the set should contain otherElements – the rest of the elements the set should contain Returns: an immutable set containing those elements, minus duplicates" />
      <item value="keep Alive Duration" />
      <item value="SECONDS" />
      <item value="Create a new connection pool with tuning parameters appropriate for a single-user application. The tuning parameters in this pool are subject to change in future OkHttp releases. Currently this pool holds up to 5 idle connections which will be evicted after 5 minutes of inactivity." />
      <item value="Sets the default connect timeout for new connections. A value of 0 means no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when converted to milliseconds." />
      <item value="Configure this client to retry or not when a connectivity problem is encountered. By default, this client silently recovers from the following problems: Unreachable IP addresses. If the URL's host has multiple IP addresses, failure to reach any individual IP address doesn't fail the overall request. This can increase availability of multi-homed services. Stale pooled connections. The ConnectionPool reuses sockets to decrease request latency, but these connections will occasionally time out. Unreachable proxy servers. A ProxySelector can be used to attempt multiple proxy servers in sequence, eventually falling back to a direct connection. Set this to false to avoid retrying requests when doing so is destructive. In this case the calling application should do its own recovery of connectivity failures." />
      <item value="Set the mandatory flag when sending messages; only applies if a returnCallback had been provided. Params: mandatory – the mandatory to set." />
      <item value="MANUAL" />
      <item value="Tests whether this thread has been interrupted. The interrupted status of the thread is unaffected by this method. A thread interruption ignored because a thread was not alive at the time of the interrupt will be reflected by this method returning false. Returns: true if this thread has been interrupted; false otherwise. See Also: interrupted()" />
      <item value="Set the string value as value of the key. The string can't be longer than 1073741824 bytes (1 GB). Params: key – value – nxxx – NX|XX, NX -- Only set the key if it does not already exist. XX -- Only set the key if it already exist. expx – EX|PX, expire time units: EX = seconds; PX = milliseconds time – expire time in the units of expx Returns: Status code reply" />
      <item value="Validate that the annotated string is not null or empty. The difference to NotEmpty is that trailing whitespaces are getting ignored. Deprecated use the standard javax.validation.constraints.NotBlank constraint instead Author: Hardy Ferentschik" />
      <item value="Rounding mode to round towards &quot;nearest neighbor&quot; unless both neighbors are equidistant, in which case round up. Behaves as for RoundingMode.UP if the discarded fraction is ≥ 0.5; otherwise, behaves as for RoundingMode.DOWN. Note that this is the rounding mode commonly taught at school. Example: Rounding mode HALF_UP Examples Input Number Input rounded to one digit with HALF_UP rounding" />
      <item value="Rounding mode to round towards &quot;nearest neighbor&quot; unless both neighbors are equidistant, in which case round up. Behaves as for ROUND_UP if the discarded fraction is ≥ 0.5; otherwise, behaves as for ROUND_DOWN. Note that this is the rounding mode that most of us were taught in grade school." />
      <item value="Set the width (in units of 1256th of a character width) The maximum column width for an individual cell is 255 characters. This value represents the number of characters that can be displayed in a cell that is formatted with the standard font (first font in the workbook). Character width is defined as the maximum digit width of the numbers 0, 1, 2, ... 9 as rendered using the default font (first font in the workbook). Unless you are using a very special font, the default character is '0' (zero), this is true for Arial (default font font in HSSF) and Calibri (default font in XSSF) Please note, that the width set by this method includes 4 pixels of margin padding (two on each side), plus 1 pixel padding for the gridlines (Section 3.3.1.12 of the OOXML spec). This results is a slightly less value of visible characters than passed to this method (approx. 12 of a character). To compute the actual number of visible characters, Excel uses the following formula (Section 3.3.1.12 of the OOXML spec): width = Truncate([{Number of Visible Characters} {Maximum Digit Width} + {5 pixel padding}]{Maximum Digit Width}256)256 Using the Calibri font as an example, the maximum digit width of 11 point font size is 7 pixels (at 96 dpi). If you set a column width to be eight characters wide, e.g. setColumnWidth(columnIndex, 8256), then the actual value of visible characters (the value shown in Excel) is derived from the following equation: Truncate([numChars7+5]7256)256 = 8; which gives 7.29. Params: columnIndex – - the column to set (0-based) width – - the width in units of 1256th of a character width Throws:" />
      <item value="threshold" />
      <item value="(The javadoc description is true upon serialization. Additionally, if the table array has not been allocated, this field holds the initial array capacity, or zero signifying DEFAULT_INITIAL_CAPACITY.)" />
      <item value="The bin count threshold for using a tree rather than list for a bin. Bins are converted to trees when adding an element to a bin with at least this many nodes. The value must be greater than 2 and should be at least 8 to mesh with assumptions in tree removal about conversion back to plain bins upon shrinkag" />
      <item value="critical" />
      <item value="/** * Removes the current thread's value for this thread-local * variable. If this thread-local variable is subsequently * {@linkplain #get read} by the current thread, its value will be * reinitialized by invoking its {@link #initialValue} method, * unless its value is {@linkplain #set set} by the current thread * in the interim. This may result in multiple invocations of the * {@code initialValue} method in the current thread. * * @since 1.5 */" />
      <item value="/** * Constructs a new set containing the elements in the specified * collection. The &lt;tt&gt;HashMap&lt;/tt&gt; is created with default load factor * (0.75) and an initial capacity sufficient to contain the elements in * the specified collection. * * @param c the collection whose elements are to be placed into this set * @throws NullPointerException if the specified collection is null */" />
      <item value="/** * Returns a string representation of this {@code BigDecimal} * without an exponent field. For values with a positive scale, * the number of digits to the right of the decimal point is used * to indicate scale. For values with a zero or negative scale, * the resulting string is generated as if the value were * converted to a numerically equal value with zero scale and as * if all the trailing zeros of the zero scale value were present * in the result. * * The entire string is prefixed by a minus sign character '-' * (&lt;tt&gt;'&amp;#92;u002D'&lt;/tt&gt;) if the unscaled value is less than * zero. No sign character is prefixed if the unscaled value is * zero or positive. * * Note that if the result of this method is passed to the * {@linkplain #BigDecimal(String) string constructor}, only the * numerical value of this {@code BigDecimal} will necessarily be * recovered; the representation of the new {@code BigDecimal} * may have a different scale. In particular, if this * {@code BigDecimal} has a negative scale, the string resulting * from this method will have a scale of zero when processed by * the string constructor. * * (This method behaves analogously to the {@code toString} * method in 1.4 and earlier releases.) * * @return a string representation of this {@code BigDecimal} * without an exponent field. * @since 1.5 * @see #toString() * @see #toEngineeringString() */" />
      <item value="/** * Sorts the specified range of the specified array of objects into * ascending order, according to the * {@linkplain Comparable natural ordering} of its * elements. The range to be sorted extends from index * {@code fromIndex}, inclusive, to index {@code toIndex}, exclusive. * (If {@code fromIndex==toIndex}, the range to be sorted is empty.) All * elements in this range must implement the {@link Comparable} * interface. Furthermore, all elements in this range must be &lt;i&gt;mutually * comparable&lt;/i&gt; (that is, {@code e1.compareTo(e2)} must not throw a * {@code ClassCastException} for any elements {@code e1} and * {@code e2} in the array). * * &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;: equal elements will * not be reordered as a result of the sort. * * &lt;p&gt;Implementation note: This implementation is a stable, adaptive, * iterative mergesort that requires far fewer than n lg(n) comparisons * when the input array is partially sorted, while offering the * performance of a traditional mergesort when the input array is * randomly ordered. If the input array is nearly sorted, the * implementation requires approximately n comparisons. Temporary * storage requirements vary from a small constant for nearly sorted * input arrays to n/2 object references for randomly ordered input * arrays. * * &lt;p&gt;The implementation takes equal advantage of ascending and * descending order in its input array, and can take advantage of * ascending and descending order in different parts of the the same * input array. It is well-suited to merging two or more sorted arrays: * simply concatenate the arrays and sort the resulting array. * * &lt;p&gt;The implementation was adapted from Tim Peters's list sort for Python * (&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt; * TimSort&lt;/a&gt;). It uses techniques from Peter McIlroy's &quot;Optimistic * Sorting and Information Theoretic Complexity&quot;, in Proceedings of the * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, * January 1993. * * @param a the array to be sorted * @param fromIndex the index of the first element (inclusive) to be * sorted * @param toIndex the index of the last element (exclusive) to be sorted * @throws IllegalArgumentException if {@code fromIndex &gt; toIndex} or * (optional) if the natural ordering of the array elements is * found to violate the {@link Comparable} contract * @throws ArrayIndexOutOfBoundsException if {@code fromIndex &lt; 0} or * {@code toIndex &gt; a.length} * @throws ClassCastException if the array contains elements that are * not &lt;i&gt;mutually comparable&lt;/i&gt; (for example, strings and * integers). */" />
      <item value="/** * Sorts the specified range of the specified array of objects according * to the order induced by the specified comparator. The range to be * sorted extends from index {@code fromIndex}, inclusive, to index * {@code toIndex}, exclusive. (If {@code fromIndex==toIndex}, the * range to be sorted is empty.) All elements in the range must be * &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator (that is, * {@code c.compare(e1, e2)} must not throw a {@code ClassCastException} * for any elements {@code e1} and {@code e2} in the range). * * &lt;p&gt;This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;: equal elements will * not be reordered as a result of the sort. * * &lt;p&gt;Implementation note: This implementation is a stable, adaptive, * iterative mergesort that requires far fewer than n lg(n) comparisons * when the input array is partially sorted, while offering the * performance of a traditional mergesort when the input array is * randomly ordered. If the input array is nearly sorted, the * implementation requires approximately n comparisons. Temporary * storage requirements vary from a small constant for nearly sorted * input arrays to n/2 object references for randomly ordered input * arrays. * * &lt;p&gt;The implementation takes equal advantage of ascending and * descending order in its input array, and can take advantage of * ascending and descending order in different parts of the the same * input array. It is well-suited to merging two or more sorted arrays: * simply concatenate the arrays and sort the resulting array. * * &lt;p&gt;The implementation was adapted from Tim Peters's list sort for Python * (&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt; * TimSort&lt;/a&gt;). It uses techniques from Peter McIlroy's &quot;Optimistic * Sorting and Information Theoretic Complexity&quot;, in Proceedings of the * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, * January 1993. * * @param &lt;T&gt; the class of the objects to be sorted * @param a the array to be sorted * @param fromIndex the index of the first element (inclusive) to be * sorted * @param toIndex the index of the last element (exclusive) to be sorted * @param c the comparator to determine the order of the array. A * {@code null} value indicates that the elements' * {@linkplain Comparable natural ordering} should be used. * @throws ClassCastException if the array contains elements that are not * &lt;i&gt;mutually comparable&lt;/i&gt; using the specified comparator. * @throws IllegalArgumentException if {@code fromIndex &gt; toIndex} or * (optional) if the comparator is found to violate the * {@link Comparator} contract * @throws ArrayIndexOutOfBoundsException if {@code fromIndex &lt; 0} or * {@code toIndex &gt; a.length} */" />
      <item value="===2019-07-07 17:09:58.451 DEBUG com.ctrip.framework.apollo.internals.RemoteConfigLongPollService Line:163 - Long polling from http://10.0.99.230:8080/notifications/v2?cluster=default&amp;appId=ems-base-data&amp;ip=192.168.32.1&amp;notifications=%5B%7B%22namespaceName%22%3A%22ems.xxjob%22%2C%22notificationId%22%3A374%7D%2C%7B%22namespaceName%22%3A%22ems.logging%22%2C%22notificationId%22%3A200%7D%2C%7B%22namespaceName%22%3A%22ems.springDataSource%22%2C%22notificationId%22%3A337%7D%2C%7B%22namespaceName%22%3A%22ems.s3%22%2C%22notificationId%22%3A11%7D%2C%7B%22namespaceName%22%3A%22ems.tssWebservice%22%2C%22notificationId%22%3A301%7D%2C%7B%22namespaceName%22%3A%22ems.core%22%2C%22notificationId%22%3A410%7D%2C%7B%22namespaceName%22%3A%22application%22%2C%22notificationId%22%3A19%7D%2C%7B%22namespaceName%22%3A%22ems.springRabbitMq%22%2C%22notificationId%22%3A418%7D%2C%7B%22namespaceName%22%3A%22ems.springRedis%22%2C%22notificationId%22%3A312%7D%2C%7B%22namespaceName%22%3A%22ems.feign%22%2C%22notificationId%22%3A415%7D%2C%7B%22namespaceName%22%3A%22ems.mybatis%22%2C%22notificationId%22%3A170%7D%2C%7B%22namespaceName%22%3A%22ems.springConfig%22%2C%22notificationId%22%3A387%7D%5D" />
      <item value="/** * The Java SQL framework allows for multiple database drivers. Each driver should supply a class that implements the Driver interface * * &lt;p&gt; * The DriverManager will try to load as many drivers as it can find and then for any given connection request, it will ask each driver in turn to try to * connect to the target URL. * &lt;/p&gt; * * &lt;p&gt; * It is strongly recommended that each Driver class should be small and standalone so that the Driver class can be loaded and queried without bringing in vast * quantities of supporting code. * &lt;/p&gt; * * &lt;p&gt; * When a Driver class is loaded, it should create an instance of itself and register it with the DriverManager. This means that a user can load and register a * driver by doing Class.forName(&quot;foo.bah.Driver&quot;) * &lt;/p&gt; */" />
      <item value="/* * Standardizes OS name information to align with other drivers/clients * for MySQL connection attributes * * @return the transformed, standardized OS name */" />
      <item value="// Tie the thread's context ClassLoader to the ClassLoader that loaded the class instead of inheriting the context ClassLoader from the current // thread, which would happen by default. // Application servers may use this information if they attempt to shutdown this thread. By leaving the default context ClassLoader this thread // could end up being shut down even when it is shared by other applications and, being it statically initialized, thus, never restarted again." />
      <item value="/** * This class implements a thread that is responsible for closing abandoned MySQL connections, i.e., connections that are not explicitly closed. * There is only one instance of this class and there is a single thread to do this task. This thread's executor is statically referenced in this same class. */" />
      <item value="/** * Removes the next reference object in this queue, blocking until either * one becomes available or the given timeout period expires. * * &lt;p&gt; This method does not offer real-time guarantees: It schedules the * timeout as if by invoking the {@link Object#wait(long)} method. * * @param timeout If positive, block for up to &lt;code&gt;timeout&lt;/code&gt; * milliseconds while waiting for a reference to be * added to this queue. If zero, block indefinitely. * * @return A reference object, if one was available within the specified * timeout period, otherwise &lt;code&gt;null&lt;/code&gt; * * @throws IllegalArgumentException * If the value of the timeout argument is negative * * @throws InterruptedException * If the timeout wait is interrupted */" />
      <item value="/** * Checks if the thread's context ClassLoader is active. This is usually true but some application managers implement a life-cycle mechanism in their * ClassLoaders that is linked to the corresponding application's life-cycle. As such, a stopped/ended application will have a ClassLoader unable to load * anything and, eventually, they throw an exception when trying to do so. When this happens, this thread has no point in being alive anymore. */" />
      <item value="Deserializer String Cache" />
      <item value="/** * Get a connection from the pool, or timeout after the specified number of milliseconds. * * @param hardTimeout the maximum time to wait for a connection from the pool * @return a java.sql.Connection instance * @throws SQLException thrown if a timeout occurs trying to obtain a connection */" />
      <item value="/** * Set the SQL query to be executed to test the validity of connections. Using * the JDBC4 &lt;code&gt;Connection.isValid()&lt;/code&gt; method to test connection validity can * be more efficient on some databases and is recommended. See * {@link HikariConfig#setJdbc4ConnectionTest(boolean)}. * * @param connectionTestQuery a SQL query string */" />
      <item value="/** * Set the SQL query to be executed to test the validity of connections. Using * the JDBC4 &lt;code&gt;Connection.isValid()&lt;/code&gt; method to test connection validity can * be more efficient on some databases and is recommended. See * {@link HikariConfig#setJdbc4ConnectionTest(boolean)}." />
      <item value="MINUTES" />
      <item value="/** * Creates a new {@code ThreadPoolExecutor} with the given initial * parameters and default thread factory and rejected execution handler. * It may be more convenient to use one of the {@link Executors} factory * methods instead of this general purpose constructor. * * @param corePoolSize the number of threads to keep in the pool, even * if they are idle, unless {@code allowCoreThreadTimeOut} is set * @param maximumPoolSize the maximum number of threads to allow in the * pool * @param keepAliveTime when the number of threads is greater than * the core, this is the maximum time that excess idle threads * will wait for new tasks before terminating. * @param unit the time unit for the {@code keepAliveTime} argument * @param workQueue the queue to use for holding tasks before they are * executed. This queue will hold only the {@code Runnable} * tasks submitted by the {@code execute} method. * @throws IllegalArgumentException if one of the following holds:&lt;br&gt; * {@code corePoolSize &lt; 0}&lt;br&gt; * {@code keepAliveTime &lt; 0}&lt;br&gt; * {@code maximumPoolSize &lt;= 0}&lt;br&gt; * {@code maximumPoolSize &lt; corePoolSize} * @throws NullPointerException if {@code workQueue} is null */" />
      <item value="/** * Splits {@code sequence} into string components and returns them as an immutable list. If you * want an {@link Iterable} which may be lazily evaluated, use {@link #split(CharSequence)}. * * @param sequence the sequence of characters to split * @return an immutable list of the segments split from the parameter * @since 15.0 */" />
      <item value="/** * Defines zero (0) or more exception {@link Class classes}, which must be * subclasses of {@link Throwable}, indicating which exception types must cause * a transaction rollback. * &lt;p&gt;By default, a transaction will be rolling back on {@link RuntimeException} * and {@link Error} but not on checked exceptions (business exceptions). See * {@link org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)} * for a detailed explanation. * &lt;p&gt;This is the preferred way to construct a rollback rule (in contrast to * {@link #rollbackForClassName}), matching the exception class and its subclasses. * &lt;p&gt;Similar to {@link org.springframework.transaction.interceptor.RollbackRuleAttribute#RollbackRuleAttribute(Class clazz)}. * @see #rollbackForClassName * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)" />
      <item value=" /**      * Returns the absolute pathname string of this abstract pathname.      *      * &lt;p&gt; If this abstract pathname is already absolute, then the pathname      * string is simply returned as if by the &lt;code&gt;{@link #getPath}&lt;/code&gt;      * method.  If this abstract pathname is the empty abstract pathname then      * the pathname string of the current user directory, which is named by the      * system property &lt;code&gt;user.dir&lt;/code&gt;, is returned.  Otherwise this      * pathname is resolved in a system-dependent way.  On UNIX systems, a      * relative pathname is made absolute by resolving it against the current      * user directory.  On Microsoft Windows systems, a relative pathname is made absolute      * by resolving it against the current directory of the drive named by the      * pathname, if any; if not, it is resolved against the current user      * directory.      *      * @return  The absolute pathname string denoting the same file or      *          directory as this abstract " />
      <item value="Substitute the template entries with the generated sheet data files" />
      <item value="/** * Returns the longest string {@code prefix} such that {@code a.toString().startsWith(prefix) &amp;&amp; * b.toString().startsWith(prefix)}, taking care not to split surrogate pairs. If {@code a} and * {@code b} have no common prefix, returns the empty string. * * @since 11.0 */" />
      <item value="equivalent" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="99" />
        <entry key="ENGLISH" value="106" />
        <entry key="CHINESE_TRADITIONAL" value="2" />
        <entry key="ESPERANTO" value="8" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1645612818503" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20181219000250238" />
      </app-key>
    </option>
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Microsoft YaHei Mono" />
    <option name="primaryFontFamily" value="Microsoft YaHei Mono" />
    <option name="translateDocumentation" value="true" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="269a4579c59bf261" />
        <option name="primaryLanguage" value="AUTO" />
      </youdao-translate>
    </option>
  </component>
</application>